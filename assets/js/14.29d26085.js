(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{419:function(t,s,a){"use strict";a.r(s);var r=a(31),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[t._v("#")]),t._v(" 链表")]),t._v(" "),a("h2",{attrs:{id:"链表的基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表的基本概念"}},[t._v("#")]),t._v(" 链表的基本概念")]),t._v(" "),a("p",[t._v("链表是一种包含数据域和指针域的数据结构，一般用头结点代表整个链表，与数组不同的是，链表的内存并不是连续的，概括自维基百科。")]),t._v(" "),a("h2",{attrs:{id:"链表家族成员介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表家族成员介绍"}},[t._v("#")]),t._v(" 链表家族成员介绍")]),t._v(" "),a("h3",{attrs:{id:"单向链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单向链表"}},[t._v("#")]),t._v(" 单向链表")]),t._v(" "),a("p",[t._v("单向链表包含两个域，一个数据域和一个指针域。这个链接指向列表中的下一个结点，而最后一个结点则指向一个空值。")]),t._v(" "),a("h3",{attrs:{id:"双向链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双向链表"}},[t._v("#")]),t._v(" 双向链表")]),t._v(" "),a("p",[t._v("双向链表每个结点有两个连接：一个指向前一个结点，（当此“连接”为第一个“连接”时，指向空值或者空列表）；而另一个指向下一个结点，（当此“连接”为最后一个“连接”时，指向空值或者空列表）。")]),t._v(" "),a("h3",{attrs:{id:"循环链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环链表"}},[t._v("#")]),t._v(" 循环链表")]),t._v(" "),a("p",[t._v("循环链表是一种“无头无尾”的链表，首结点和末结点被连接在一起。")]),t._v(" "),a("p",[a("em",[t._v("这里有些参考书是节点，有些是结点， 其实他们所表述的是一个意思。笔者查阅了相关资料，最终认为结点比较合理，所以文中以结点来表述，英文单词 node 翻译过来本身就有结点的意思，另一方面，结点强调空间方面，比如说打结，而节点更加强调时间方面，比如一个事件的时间新闻节点")])]),t._v(" "),a("h2",{attrs:{id:"链表的操作方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表的操作方式"}},[t._v("#")]),t._v(" 链表的操作方式")]),t._v(" "),a("p",[a("em",[t._v("这里以单向链表的实现为例进行讲解")])]),t._v(" "),a("h3",{attrs:{id:"链表的创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表的创建"}},[t._v("#")]),t._v(" 链表的创建")]),t._v(" "),a("p",[t._v("吃过冰糖葫芦的朋友，可以发现冰糖葫芦这个结构啊，它很像链表。我们把山楂清洗干净，在外面糊上一层冰糖，准备好大牙签，一个一个串起来，每个山楂的头都指向下一个山楂，直到冰糖葫芦串最后一个山楂指向空气，像这样的模型，我们可以把它称之为“冰糖链表模型”。")]),t._v(" "),a("h4",{attrs:{id:"链表结点的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表结点的定义"}},[t._v("#")]),t._v(" 链表结点的定义")]),t._v(" "),a("p",[t._v("根据楼上的模型，我们把山楂抽象出来就是链表的结点了，它包含本身的数据和指向下一个结点的指针。")]),t._v(" "),a("div",{staticClass:"language-typescript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Definition for singly-linked list.\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SinglyListNode")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  val"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  next"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" SinglyListNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" SinglyListNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("是的，可能细心的读者已经观察到了，楼上的就是笔者刷 leetcode 时，leetcode 上面给出的链表结点的实现。这里的数据域是 number 类型的变量，但是在很多我们现实生活的场景，这里的数据它难道不可以是 string 类型，boolean 类型等等吗？想一下，我们需要什么啊？我们其实是需要一个模板，这个模板到时候你可以根据自己的业务场景去框定它是 number、string 还是 boolean 等等。这里就引入了 typescript 中的泛型，通过泛型我们可以轻松地实现我们楼上的需求。")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("type.ts")]),t._v("下定义参数类型如：")]),t._v(" "),a("div",{staticClass:"language-typescript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("paramsType")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("基于泛型实现的结点类如下：")]),t._v(" "),a("div",{staticClass:"language-typescript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" paramsType "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./type'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Definition for singly-linked list.\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SinglyListNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" paramsType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  val"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  next"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" SinglyListNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" SinglyListNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("em",[t._v("这里我们先定义了一个联合类型 paramsType,然后通过"),a("T",{attrs:{extends:"",xx:""}},[t._v(" 的方式约束泛型, 想一下为什么不直接写"),a("T",[t._v("不是更少写点代码吗？是这样子的，例如 SinglyListNode"),a("null",[t._v(", SinglyListNode"),a("undefined",[t._v("这种就不会触发编译报错，而通过上面约束泛型的形式可以避免这个问题")])],1)],1)],1)],1)]),t._v(" "),a("h3",{attrs:{id:"链表的遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表的遍历"}},[t._v("#")]),t._v(" 链表的遍历")]),t._v(" "),a("h3",{attrs:{id:"链表的插入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表的插入"}},[t._v("#")]),t._v(" 链表的插入")]),t._v(" "),a("h3",{attrs:{id:"链表的删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表的删除"}},[t._v("#")]),t._v(" 链表的删除")]),t._v(" "),a("h3",{attrs:{id:"链表的合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表的合并"}},[t._v("#")]),t._v(" 链表的合并")]),t._v(" "),a("h3",{attrs:{id:"链表的反转"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表的反转"}},[t._v("#")]),t._v(" 链表的反转")]),t._v(" "),a("h2",{attrs:{id:"参考文献"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[t._v("#")]),t._v(" 参考文献")]),t._v(" "),a("ul",[a("li",[t._v("维基百科 - 链表：https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8")])])])}),[],!1,null,null,null);s.default=e.exports}}]);